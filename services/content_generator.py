from typing import Dict
from services.news_service import NewsItem
import re
import logging


class ContentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö"""

    def __init__(self):
        self.style_templates = {
            'formal': {
                'prefix': 'üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n\n',
                'title_format': '<b>{title}</b>\n\n',
                'description_format': '{description}\n\n',
                'link_format': 'üîó <a href="{url}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>',
                'footer': '\n\nüìä #–Ω–æ–≤–æ—Å—Ç–∏ #{category}'
            },
            'casual': {
                'prefix': 'üëã –ü—Ä–∏–≤–µ—Ç! –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n',
                'title_format': 'üî• <b>{title}</b>\n\n',
                'description_format': '{description}\n\n',
                'link_format': 'üëÄ <a href="{url}">–ü–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç</a>',
                'footer': '\n\n‚úåÔ∏è –£–≤–∏–¥–∏–º—Å—è! #{category}'
            },
            'meme': {
                'prefix': 'ü§° –í–ù–ò–ú–ê–ù–ò–ï! –í–ê–ñ–ù–ê–Ø –ò–ù–§–ê!\n\n',
                'title_format': 'üí• {title} üí•\n\n',
                'description_format': 'üòé {description}\n\n',
                'link_format': 'ü§ì <a href="{url}">–ö–ª–∏–∫–∞–π —Å—é–¥–∞, —É–º–Ω–∏–∫</a>',
                'footer': '\n\nüî•üî•üî• #–æ–≥–æ–Ω—å #–∫–æ–Ω—Ç–µ–Ω—Ç #{category}'
            }
        }

    async def generate_post(self, news_item: NewsItem, style: str = 'formal', category: str = 'news') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        try:
            template = self.style_templates.get(style, self.style_templates['formal'])

            # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤
            clean_description = self._clean_html(news_item.description)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Telegram
            if len(clean_description) > 800:
                clean_description = clean_description[:797] + '...'

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç
            post_content = template['prefix']
            post_content += template['title_format'].format(title=news_item.title)

            if clean_description:
                post_content += template['description_format'].format(description=clean_description)

            post_content += template['link_format'].format(url=news_item.url)
            post_content += template['footer'].format(category=category)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞ (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(post_content) > 4000:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                max_desc_length = 4000 - len(post_content) + len(clean_description)
                if max_desc_length > 100:
                    clean_description = clean_description[:max_desc_length - 3] + '...'
                    post_content = template['prefix']
                    post_content += template['title_format'].format(title=news_item.title)
                    post_content += template['description_format'].format(description=clean_description)
                    post_content += template['link_format'].format(url=news_item.url)
                    post_content += template['footer'].format(category=category)

            logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç –¥–ª–∏–Ω–æ–π {len(post_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return post_content

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}"

    def _clean_html(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤"""
        if not text:
            return ""

        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', text)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        import html
        clean_text = html.unescape(clean_text)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()

        return clean_text