from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.keyboards import (
    get_category_keyboard,
    get_style_keyboard,
    get_main_menu_keyboard,
    get_subscription_keyboard
)
from bot.states import UserStates
from services.news_service import NewsService
from services.content_generator import ContentGenerator
from services.test_post_service import TestPostService
from database.database import get_db
import logging
import html

router = Router()


def escape_html(text: str) -> str:
    if not text:
        return ""
    return html.escape(text)


async def send_text_only(callback: CallbackQuery, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å —Ñ–æ—Ç–æ)"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


@router.callback_query(F.data == "test_post")
async def start_test_posting(callback: CallbackQuery, state: FSMContext):
    async for db in get_db():
        can_create, error_message = await TestPostService.can_create_test_post(
            db, callback.from_user.id
        )

        if not can_create:
            error_text = f"üö´ <b>–õ–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n{error_message}"
            await send_text_only(callback, error_text, get_subscription_keyboard())
            await callback.answer()
            return

        break

    await state.set_state(UserStates.selecting_category)

    text = (
        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∏–Ω–≥</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º, –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–æ—Å—Ç—ã –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:"
    )

    await send_text_only(callback, text, get_category_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("cat_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]

    await state.update_data(category=category)
    await state.set_state(UserStates.selecting_style)

    category_names = {
        'it': 'üíª IT & Tech',
        'crypto': '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'business': 'üíº –ë–∏–∑–Ω–µ—Å',
        'general': 'üåç –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'esports': 'üéÆ –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç',
        'tech': 'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'science': 'üî¨ –ù–∞—É–∫–∞',
        'auto': 'üöó –ê–≤—Ç–æ',
        'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'sport': '‚öΩ –°–ø–æ—Ä—Ç'
    }

    category_name = category_names.get(category, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    text = (
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:"
    )

    await send_text_only(callback, text, get_style_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("style_"))
async def select_style(callback: CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]

    await state.update_data(style=style)
    await state.set_state(UserStates.waiting_channel_setup)

    style_names = {
        'formal': 'üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π',
        'casual': 'üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π',
        'meme': 'ü§™ –ú–µ–º–Ω—ã–π'
    }

    style_name = style_names.get(style, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    try:
        bot_info = await callback.bot.get_me()
        bot_username = bot_info.username if bot_info.username else "–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞"
    except Exception:
        bot_username = "–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞"

    text = (
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{style_name}</b>\n\n"
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã¬ª\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª\n"
        f"4Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ: @{bot_username}\n"
        "5Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ <b>¬´–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π¬ª</b>\n\n"
        "6Ô∏è‚É£ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>username –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel)\n\n"
        "‚ùì <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å username –∫–∞–Ω–∞–ª–∞?</b>\n"
        "–ó–∞–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –¢–∏–ø –∫–∞–Ω–∞–ª–∞ ‚Üí –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞"
    )

    await send_text_only(callback, text)
    await callback.answer()


@router.message(UserStates.waiting_channel_setup)
async def receive_channel_info(message: Message, state: FSMContext):
    channel_input = message.text.strip()

    if not (channel_input.startswith('@') or 'telegram.me/' in channel_input or 't.me/' in channel_input):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.",
            parse_mode='HTML'
        )
        return

    if channel_input.startswith('@'):
        channel_username = channel_input
    elif 'telegram.me/' in channel_input:
        channel_username = '@' + channel_input.split('telegram.me/')[1]
    elif 't.me/' in channel_input:
        channel_username = '@' + channel_input.split('t.me/')[1]
    else:
        channel_username = channel_input

    channel_username = channel_username.strip().split('?')[0]

    await state.update_data(channel_username=channel_username)
    await state.set_state(UserStates.checking_bot_permissions)

    await check_bot_permissions_real(message, state, channel_username)


async def check_bot_permissions_real(message: Message, state: FSMContext, channel_username: str):
    try:
        safe_channel_name = escape_html(channel_username)

        checking_msg = await message.answer(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {safe_channel_name}...</b>",
            parse_mode='HTML'
        )

        try:
            chat = await message.bot.get_chat(channel_username)
            chat_member = await message.bot.get_chat_member(channel_username, message.bot.id)

            if chat_member.status not in ['administrator']:
                await checking_msg.edit_text(
                    f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {safe_channel_name}</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.",
                    parse_mode='HTML'
                )
                return

            if not chat_member.can_post_messages:
                await checking_msg.edit_text(
                    f"‚ùå <b>–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ {safe_channel_name}</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.",
                    parse_mode='HTML'
                )
                return

            await checking_msg.edit_text(
                "‚úÖ <b>–ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç...",
                parse_mode='HTML'
            )

            await generate_and_send_test_post(message, state, channel_username)

        except Exception as e:
            error_msg = str(e)
            safe_error = escape_html(error_msg[:200])

            if "chat not found" in error_msg.lower():
                await checking_msg.edit_text(
                    f"‚ùå <b>–ö–∞–Ω–∞–ª {safe_channel_name} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∫–∞–Ω–∞–ª–∞. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–≥–æ.",
                    parse_mode='HTML'
                )
            elif "not enough rights" in error_msg.lower() or "forbidden" in error_msg.lower():
                await checking_msg.edit_text(
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {safe_channel_name}</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode='HTML'
                )
            else:
                await checking_msg.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
                    f"{safe_error}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                    parse_mode='HTML'
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )


async def generate_and_send_test_post(message: Message, state: FSMContext, channel_username: str):
    try:
        user_data = await state.get_data()
        category = user_data.get('category', 'general')
        style = user_data.get('style', 'formal')

        news_service = NewsService()
        content_generator = ContentGenerator()

        news_item = await news_service.get_random_news(category)

        if not news_item:
            from services.news_service import NewsItem
            news_item = NewsItem(
                title="–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                description="–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –ø–æ—Å—Ç—ã. "
                            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.",
                url="https://example.com",
                published_at="2024-01-01T12:00:00Z"
            )

        formatted_content = await content_generator.generate_post(news_item, style, category)

        try:
            sent_message = await message.bot.send_message(
                chat_id=channel_username,
                text=formatted_content,
                parse_mode='HTML',
                disable_web_page_preview=False
            )

            async for db in get_db():
                await TestPostService.record_test_post(
                    db,
                    message.from_user.id,
                    channel_username,
                    category,
                    style
                )
                break

            safe_channel = escape_html(channel_username)
            safe_category = escape_html(category)
            safe_style = escape_html(style)

            success_text = (
                "üéâ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
                "üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞:</b>\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª: {safe_channel}\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {safe_category}\n"
                f"‚Ä¢ –°—Ç–∏–ª—å: {safe_style}\n\n"
                "‚ú® <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                "‚ö†Ô∏è <b>–ü–æ–º–Ω–∏—Ç–µ:</b> –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n\n"
                "üíé <b>–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤?</b> –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É "
                "–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å!"
            )

            await message.answer(
                success_text,
                reply_markup=get_subscription_keyboard(),
                parse_mode='HTML'
            )

            await state.set_state(UserStates.main_menu)

        except Exception as e:
            error_msg = str(e)
            safe_channel = escape_html(channel_username)
            safe_error = escape_html(error_msg[:200])

            if "chat not found" in error_msg.lower():
                await message.answer(
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ {safe_channel}</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞\n"
                    "‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞",
                    parse_mode='HTML'
                )
            elif "forbidden" in error_msg.lower():
                await message.answer(
                    f"‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {safe_channel}</b>\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                    "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:</b>\n\n"
                    f"{safe_error}",
                    parse_mode='HTML'
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


@router.callback_query(F.data == "select_category")
async def back_to_category_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.selecting_category)

    text = (
        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∏–Ω–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:"
    )

    await send_text_only(callback, text, get_category_keyboard())
    await callback.answer()


@router.callback_query(F.data == "select_style")
async def back_to_style_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.selecting_style)
    user_data = await state.get_data()
    category = user_data.get('category', 'general')

    category_names = {
        'it': 'üíª IT & Tech',
        'crypto': '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'business': 'üíº –ë–∏–∑–Ω–µ—Å',
        'general': 'üåç –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'esports': 'üéÆ –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç',
        'tech': 'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'science': 'üî¨ –ù–∞—É–∫–∞',
        'auto': 'üöó –ê–≤—Ç–æ',
        'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'sport': '‚öΩ –°–ø–æ—Ä—Ç'
    }

    category_name = category_names.get(category, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    text = (
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:"
    )

    await send_text_only(callback, text, get_style_keyboard())
    await callback.answer()