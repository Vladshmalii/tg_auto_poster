from aiogram import Router, F
from aiogram.types import CallbackQuery, LabeledPrice, PreCheckoutQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from datetime import datetime, timedelta
from database.models import User, Subscription, Transaction
from database.database import get_db
from bot.keyboards import get_subscription_keyboard, get_main_menu_keyboard
from bot.states import UserStates
from config.settings import settings
import logging

router = Router()


async def send_text_only(callback: CallbackQuery, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å —Ñ–æ—Ç–æ)"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


@router.callback_query(F.data == "buy_subscription")
async def show_subscription_plans(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.selecting_subscription)

    text = (
        "üíé <b>–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã NewsBot</b>\n\n"
        "üî• <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Ç–∏–ª–µ–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ –î–æ 3 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
    )

    await send_text_only(callback, text, get_subscription_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("sub_"))
async def process_subscription_purchase(callback: CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    price = settings.SUBSCRIPTION_PRICES[days]

    await state.update_data(subscription_days=days, subscription_price=price)
    await state.set_state(UserStates.waiting_payment)

    descriptions = {
        7: "üöÄ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞–Ω\nüì∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n‚è∞ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞",
        14: "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω\nüì∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n‚è∞ 14 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\nüí° –≠–∫–æ–Ω–æ–º–∏—è 8%",
        30: "üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\nüì∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n‚è∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\nüí° –≠–∫–æ–Ω–æ–º–∏—è 17%"
    }

    prices = [LabeledPrice(label=f"NewsBot Premium {days}–¥", amount=price)]

    try:
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"NewsBot Premium - {days} –¥–Ω–µ–π",
            description=descriptions.get(days, f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {days} –¥–Ω–µ–π"),
            payload=f"subscription_{days}_{callback.from_user.id}_{int(datetime.now().timestamp())}",
            provider_token="",
            currency="XTR",
            prices=prices,
            photo_url=settings.SUBSCRIPTION_IMAGES.get(days),
            photo_width=512,
            photo_height=512,
            need_shipping_address=False,
            is_flexible=False
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_subscription")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])

        await send_text_only(
            callback,
            f"üí≥ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: <b>NewsBot Premium {days} –¥–Ω–µ–π</b>\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚≠ê</b>\n\n"
            "üì± –°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–ó–∞–ø–ª–∞—Ç–∏—Ç—å ‚≠ê\"</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.",
            back_keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")
        await send_text_only(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            get_subscription_keyboard()
        )

    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        payload_parts = pre_checkout_query.invoice_payload.split("_")

        if len(payload_parts) >= 3:
            days = int(payload_parts[1])
            user_telegram_id = int(payload_parts[2])

            if days in [7, 14, 30] and user_telegram_id > 0:
                await pre_checkout_query.answer(ok=True)
                logging.info(f"Pre-checkout approved for user {user_telegram_id}, {days} days")
            else:
                await pre_checkout_query.answer(
                    ok=False,
                    error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏"
                )
                logging.warning(f"Pre-checkout declined: invalid params {payload_parts}")
        else:
            await pre_checkout_query.answer(
                ok=False,
                error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ pre-checkout: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
        )


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    payment = message.successful_payment

    logging.info(f"üí∞ –ü–û–õ–£–ß–ï–ù –ü–õ–ê–¢–ï–ñ!")
    logging.info(f"–°—É–º–º–∞: {payment.total_amount} {payment.currency}")
    logging.info(f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment.telegram_payment_charge_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")

    try:
        payload_parts = payment.invoice_payload.split("_")
        days = int(payload_parts[1])
        user_telegram_id = int(payload_parts[2])

        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if user:
                expires_at = datetime.utcnow() + timedelta(days=days)

                subscription = Subscription(
                    user_id=user.id,
                    plan_type=days,
                    expires_at=expires_at,
                    is_active=True
                )
                db.add(subscription)

                transaction = Transaction(
                    user_id=user.id,
                    amount=payment.total_amount,
                    currency=payment.currency,
                    payment_method="stars",
                    status="completed",
                    external_id=payment.telegram_payment_charge_id
                )
                db.add(transaction)

                await db.commit()

                success_text = (
                    "üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ <b>{days} –¥–Ω–µ–π</b>\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expires_at.strftime('%d.%m.%Y %H:%M')}</b>\n\n"
                    "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
                )

                await message.answer(success_text, parse_mode='HTML')

                await notify_admin_about_payment(message.bot, payment, user, days)

            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –ø–ª–∞—Ç–µ–∂–∞: "
            f"<code>{payment.telegram_payment_charge_id}</code>",
            parse_mode='HTML'
        )


async def notify_admin_about_payment(bot, payment, user, days):
    try:
        if settings.ADMIN_IDS:
            admin_text = (
                "üí∞ <b>–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'Unknown'} (ID: {user.telegram_id})\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: {days} –¥–Ω–µ–π\n"
                f"üí≥ –°—É–º–º–∞: {payment.total_amount} {payment.currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment.telegram_payment_charge_id}</code>\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            for admin_id in settings.ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=admin_text,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def get_payment_statistics(db: AsyncSession, period_days: int = 30):
    try:
        start_date = datetime.utcnow() - timedelta(days=period_days)

        result = await db.execute(
            select(Transaction).where(
                and_(
                    Transaction.status == 'completed',
                    Transaction.created_at >= start_date
                )
            )
        )
        transactions = result.scalars().all()

        total_amount = sum(t.amount for t in transactions)
        total_count = len(transactions)

        subscription_stats = {}
        for transaction in transactions:
            if transaction.amount == 100:
                subscription_stats['7_days'] = subscription_stats.get('7_days', 0) + 1
            elif transaction.amount == 180:
                subscription_stats['14_days'] = subscription_stats.get('14_days', 0) + 1
            elif transaction.amount == 300:
                subscription_stats['30_days'] = subscription_stats.get('30_days', 0) + 1

        return {
            'total_amount': total_amount,
            'total_count': total_count,
            'period_days': period_days,
            'subscription_stats': subscription_stats,
            'average_amount': total_amount / total_count if total_count > 0 else 0
        }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


@router.message(F.text == "/payment_stats")
async def show_payment_stats(message: Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return

    try:
        async for db in get_db():
            stats = await get_payment_statistics(db, 30)

            if stats:
                stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ 30 –¥–Ω–µ–π</b>\n\n"
                    f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['total_amount']} Stars</b>\n"
                    f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{stats['total_count']}</b>\n"
                    f"üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{stats['average_amount']:.1f} Stars</b>\n\n"
                    f"<b>–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:</b>\n"
                    f"‚Ä¢ 7 –¥–Ω–µ–π: {stats['subscription_stats'].get('7_days', 0)} —à—Ç\n"
                    f"‚Ä¢ 14 –¥–Ω–µ–π: {stats['subscription_stats'].get('14_days', 0)} —à—Ç\n"
                    f"‚Ä¢ 30 –¥–Ω–µ–π: {stats['subscription_stats'].get('30_days', 0)} —à—Ç"
                )

                await message.answer(stats_text, parse_mode='HTML')
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")