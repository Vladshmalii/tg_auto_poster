from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, delete
from datetime import datetime, timedelta, date

from tasks import send_manual_post, schedule_post_at_time
from database.models import User, Subscription, Transaction, AutopostSettings, PostLog
from database.database import get_db
from bot.keyboards import get_profile_keyboard, get_main_menu_keyboard
from bot.states import UserStates

import json
import logging

router = Router()

async def send_text_only(callback: CallbackQuery, text: str, reply_markup=None):
    try:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


def format_subscription_status(subscription):
    if not subscription:
        return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç"

    if not subscription.is_active:
        return "üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

    expires_at = subscription.expires_at
    now = datetime.utcnow()

    if expires_at <= now:
        return "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"

    time_left = expires_at - now
    days_left = time_left.days
    hours_left = time_left.seconds // 3600

    if days_left > 0:
        return f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ ({days_left} –¥–Ω.)"
    elif hours_left > 0:
        return f"üü° –ê–∫—Ç–∏–≤–Ω–∞ ({hours_left} —á.)"
    else:
        return "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"


def get_subscription_emoji(plan_type):
    emoji_map = {
        7: "ü•â",
        14: "ü•à",
        30: "ü•á"
    }
    return emoji_map.get(plan_type, "üì¶")


def get_category_emoji_name(category):
    category_map = {
        'it': 'üíª IT & Tech',
        'crypto': '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'business': 'üíº –ë–∏–∑–Ω–µ—Å',
        'general': 'üåç –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'esports': 'üéÆ –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç',
        'tech': 'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'science': 'üî¨ –ù–∞—É–∫–∞',
        'auto': 'üöó –ê–≤—Ç–æ',
        'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'sport': '‚öΩ –°–ø–æ—Ä—Ç'
    }
    return category_map.get(category, f"üìÑ {category}")


def get_style_emoji_name(style):
    style_map = {
        'formal': 'üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π',
        'casual': 'üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π',
        'meme': 'ü§™ –ú–µ–º–Ω—ã–π'
    }
    return style_map.get(style, f"‚úèÔ∏è {style}")


def get_schedule_times(frequency: int) -> str:
    schedule_map = {
        1: "09:00",
        2: "09:00,21:00",
        3: "09:00,15:00,21:00"
    }
    return schedule_map.get(frequency, "09:00")


def format_autopost_summary(data: dict) -> str:
    channels = data.get('channels', [])
    categories = data.get('categories', [])
    style = data.get('style', '')
    frequency = data.get('frequency', 1)

    channels_text = '\n'.join([f"‚Ä¢ {ch}" for ch in channels]) if channels else "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã"

    category_names = [get_category_emoji_name(cat) for cat in categories]
    categories_text = '\n'.join([f"‚Ä¢ {name}" for name in category_names]) if categories else "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã"

    style_text = get_style_emoji_name(style) if style else "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω"

    schedule_names = {
        1: "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (09:00)",
        2: "2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 21:00)",
        3: "3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 15:00, 21:00)"
    }
    schedule_text = schedule_names.get(frequency, "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    return f"""üìã <b>–°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</b>

üì∫ <b>–ö–∞–Ω–∞–ª—ã:</b>
{channels_text}

üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
{categories_text}

üé® <b>–°—Ç–∏–ª—å:</b> {style_text}

‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {schedule_text}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""


async def get_user_post_stats(db: AsyncSession, user_id: int, channel_id: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()

    query = select(func.count(PostLog.id)).where(
        and_(
            PostLog.user_id == user_id,
            PostLog.created_at >= today
        )
    )

    if channel_id:
        query = query.where(PostLog.channel_id == channel_id)

    result = await db.execute(query)
    posts_today = result.scalar() or 0

    return posts_today


@router.callback_query(F.data == "my_profile")
async def show_profile(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.viewing_profile)

    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await send_text_only(
                    callback,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                    get_main_menu_keyboard()
                )
                await callback.answer()
                return

            subscription_result = await db.execute(
                select(Subscription).where(
                    and_(
                        Subscription.user_id == user.id,
                        Subscription.is_active == True
                    )
                ).order_by(Subscription.expires_at.desc())
            )
            active_subscription = subscription_result.first()
            subscription = active_subscription[0] if active_subscription else None

            history_result = await db.execute(
                select(Subscription).where(
                    Subscription.user_id == user.id
                ).order_by(Subscription.created_at.desc()).limit(5)
            )
            subscription_history = history_result.scalars().all()

            payments_result = await db.execute(
                select(Transaction).where(
                    and_(
                        Transaction.user_id == user.id,
                        Transaction.status == 'completed'
                    )
                ).order_by(Transaction.created_at.desc())
            )
            payments = payments_result.scalars().all()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            posts_today = await get_user_post_stats(db, user.id)

            total_spent = sum(payment.amount for payment in payments)
            total_payments = len(payments)
            last_payment = payments[0] if payments else None

            profile_text = (
                f"üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üÜî ID: <code>{user.telegram_id}</code>\n"
                f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            )

            if subscription:
                emoji = get_subscription_emoji(subscription.plan_type)
                status = format_subscription_status(subscription)
                expires_date = subscription.expires_at.strftime('%d.%m.%Y %H:%M')

                profile_text += (
                    f"üì¶ <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n"
                    f"{emoji} –ü–ª–∞–Ω: {subscription.plan_type} –¥–Ω–µ–π\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n\n"
                )
            else:
                profile_text += (
                    f"üì¶ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n"
                    f"‚ùå –ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç\n"
                    f"üí° –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
            profile_text += (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n"
                f"üìà –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {posts_today}/3\n"
                f"‚è∞ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00\n\n"
            )

            if payments:
                last_payment_date = last_payment.created_at.strftime('%d.%m.%Y')
                profile_text += (
                    f"üí≥ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n"
                    f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} ‚≠ê\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_payments}\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {last_payment_date}\n\n"
                )
            else:
                profile_text += (
                    f"üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n"
                    f"üí° –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!\n"
                    f"üéØ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö\n"
                    f"üîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ\n\n"
                )

            if subscription_history:
                profile_text += f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫</b>\n"
                for i, sub in enumerate(subscription_history[:3], 1):
                    emoji = get_subscription_emoji(sub.plan_type)
                    status_emoji = "üü¢" if sub.is_active else "üî¥"
                    created_date = sub.created_at.strftime('%d.%m.%Y')
                    profile_text += f"{status_emoji} {emoji} {sub.plan_type}–¥ - {created_date}\n"

                if len(subscription_history) > 3:
                    profile_text += f"... –∏ –µ—â–µ {len(subscription_history) - 3}\n"

            await send_text_only(callback, profile_text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è",
            get_main_menu_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "manual_post")
async def show_manual_post_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subscription_result = await db.execute(
                select(Subscription).where(
                    and_(
                        Subscription.user_id == user.id,
                        Subscription.is_active == True,
                        Subscription.expires_at > datetime.utcnow()
                    )
                )
            )
            active_subscription = subscription_result.first()

            if not active_subscription:
                text = (
                    "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                    "‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    "–î–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏"
                )
                await send_text_only(callback, text, get_profile_keyboard())
                await callback.answer()
                return

            autopost_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = autopost_result.scalar_one_or_none()

            if not setting:
                text = (
                    "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                    "‚ùå <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞'.\n\n"
                    "üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"
                )
                await send_text_only(callback, text, get_profile_keyboard())
                await callback.answer()
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            posts_today = await get_user_post_stats(db, user.id, setting.channel_id)

            text = (
                "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å</b> - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞\n"
                "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {setting.channel_id}\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {get_category_emoji_name(setting.category)}\n"
                f"üé® <b>–°—Ç–∏–ª—å:</b> {get_style_emoji_name(setting.style)}\n\n"
                f"üìä <b>–õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤:</b> {posts_today}/3 —Å–µ–≥–æ–¥–Ω—è\n"
            )

            if posts_today >= 3:
                text += "‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞"

            from bot.keyboards import get_manual_post_keyboard
            await send_text_only(callback, text, get_manual_post_keyboard(posts_today >= 3))
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await send_text_only(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", get_profile_keyboard())

    await callback.answer()


@router.callback_query(F.data == "manual_send_now")
async def manual_send_now(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = settings_result.scalar_one_or_none()

            if not setting:
                await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤
            posts_today = await get_user_post_stats(db, user.id, setting.channel_id)

            if posts_today >= 3:
                await callback.answer(
                    f"‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {posts_today}/3 –ø–æ—Å—Ç–æ–≤",
                    show_alert=True
                )
                return

            send_manual_post.delay(
                user_id=user.id,
                channel_id=setting.channel_id,
                category=setting.category,
                style=setting.style
            )

            text = (
                "üöÄ <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è!</b>\n\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {setting.channel_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(setting.category)}\n"
                f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(setting.style)}\n"
                f"üìä –ë—É–¥–µ—Ç: {posts_today + 1}/3 –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n\n"
                "‚è≥ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã"
            )

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞", show_alert=True)


@router.callback_query(F.data == "manual_schedule")
async def manual_schedule_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = settings_result.scalar_one_or_none()

            if not setting:
                await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
            posts_today = await get_user_post_stats(db, user.id, setting.channel_id)

            await state.set_state(UserStates.scheduling_manual_post)

            text = (
                "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15:23</code> –∏–ª–∏ <code>09:00</code>\n\n"
                "üìÖ –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≤—Ç—Ä–∞\n"
                f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {posts_today}/3 –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:"
            )

            from bot.keyboards import get_manual_schedule_cancel_keyboard
            await send_text_only(callback, text, get_manual_schedule_cancel_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

    await callback.answer()


@router.message(UserStates.scheduling_manual_post)
async def process_schedule_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    time_input = message.text.strip()

    try:
        hour, minute = map(int, time_input.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:23)",
            parse_mode='HTML'
        )
        return

    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = settings_result.scalar_one_or_none()

            if not setting:
                await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            schedule_post_at_time.delay(
                user_id=user.id,
                channel_id=setting.channel_id,
                category=setting.category,
                style=setting.style,
                target_time=time_input
            )

            now = datetime.now()
            target_hour, target_minute = hour, minute
            target_datetime = now.replace(hour=target_hour, minute=target_minute, second=0)

            if target_datetime <= now:
                target_datetime += timedelta(days=1)
                day_text = "–∑–∞–≤—Ç—Ä–∞"
            else:
                day_text = "—Å–µ–≥–æ–¥–Ω—è"

            text = (
                "‚úÖ <b>–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {time_input} ({day_text})\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {setting.channel_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(setting.category)}\n"
                f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(setting.style)}\n\n"
                "üîî –ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç 3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å"
            )

            await message.answer(text, reply_markup=get_profile_keyboard(), parse_mode='HTML')
            await state.clear()
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")


# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –∫–æ–ø–∏—Ä—É—é –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
@router.callback_query(F.data == "profile_subscription")
async def show_subscription_details(callback: CallbackQuery, state: FSMContext):
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subscriptions_result = await db.execute(
                select(Subscription).where(
                    Subscription.user_id == user.id
                ).order_by(Subscription.created_at.desc())
            )
            subscriptions = subscriptions_result.scalars().all()

            if not subscriptions:
                text = (
                    "üì¶ <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
                    "üí° –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫:\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ—Å—Ç–∏–Ω–≥—É –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                    "‚Ä¢ –í—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Ç–∏–ª–µ–π\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                    "‚Ä¢ –î–æ 3 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å"
                )
            else:
                text = "üì¶ <b>–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"

                for i, sub in enumerate(subscriptions, 1):
                    emoji = get_subscription_emoji(sub.plan_type)
                    status = format_subscription_status(sub)
                    created_date = sub.created_at.strftime('%d.%m.%Y %H:%M')
                    expires_date = sub.expires_at.strftime('%d.%m.%Y %H:%M')

                    text += (
                        f"{i}. {emoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞ {sub.plan_type} –¥–Ω–µ–π</b>\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_date}\n"
                        f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_date}\n"
                    )

                    if sub.is_active:
                        now = datetime.utcnow()
                        if sub.expires_at > now:
                            time_left = sub.expires_at - now
                            days_left = time_left.days
                            hours_left = time_left.seconds // 3600

                            if days_left > 0:
                                text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω. {hours_left} —á.\n"
                            else:
                                text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á.\n"

                    text += "\n"

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö",
            get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "profile_payments")
async def show_payment_history(callback: CallbackQuery, state: FSMContext):
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            payments_result = await db.execute(
                select(Transaction).where(
                    Transaction.user_id == user.id
                ).order_by(Transaction.created_at.desc()).limit(10)
            )
            payments = payments_result.scalars().all()

            if not payments:
                text = (
                    "üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                    "‚ùå –ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ\n\n"
                    "üí° –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
                )
            else:
                total_spent = sum(p.amount for p in payments)
                text = (
                    f"üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                    f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{total_spent} ‚≠ê</b>\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{len(payments)}</b>\n\n"
                )

                for i, payment in enumerate(payments, 1):
                    payment_date = payment.created_at.strftime('%d.%m.%Y %H:%M')
                    status_emoji = "‚úÖ" if payment.status == "completed" else "‚ùå"

                    plan_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if payment.amount == 100:
                        plan_type = "7 –¥–Ω–µ–π"
                    elif payment.amount == 180:
                        plan_type = "14 –¥–Ω–µ–π"
                    elif payment.amount == 300:
                        plan_type = "30 –¥–Ω–µ–π"

                    text += (
                        f"{i}. {status_emoji} <b>{payment.amount} ‚≠ê</b>\n"
                        f"üì¶ –ü–ª–∞–Ω: {plan_type}\n"
                        f"üìÖ –î–∞—Ç–∞: {payment_date}\n"
                        f"üÜî ID: <code>{payment.external_id[:12]}...</code>\n\n"
                    )

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏",
            get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "profile_settings")
async def show_profile_settings(callback: CallbackQuery, state: FSMContext):
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            autopost_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                )
            )
            autopost_settings = autopost_result.scalars().all()

            channels_count = len(set(setting.channel_id for setting in autopost_settings))
            categories = set(setting.category for setting in autopost_settings)
            styles = set(setting.style for setting in autopost_settings)

            categories_text = ', '.join(
                [get_category_emoji_name(cat) for cat in categories]) if categories else '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
            styles_text = ', '.join([get_style_emoji_name(style) for style in styles]) if styles else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
            posts_today = await get_user_post_stats(db, user.id)

            text = (
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
                f"üë§ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                f"üÜî Telegram ID: <code>{user.telegram_id}</code>\n"
                f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üåê –Ø–∑—ã–∫: {user.language}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"üìà –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {posts_today}/3\n"
                f"‚è∞ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00\n\n"
                f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
                f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n"
                f"ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</b>\n"
                f"üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channels_count}\n"
                f"üì∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}\n"
                f"üé® –°—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤: {styles_text}\n\n"
                f"üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
            )

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "profile_help")
async def show_profile_help(callback: CallbackQuery, state: FSMContext):
    text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é</b>\n\n"

        "<b>üì¶ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n"
        "‚Ä¢ ü•â 7 –¥–Ω–µ–π - –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ ü•à 14 –¥–Ω–µ–π - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ ü•á 30 –¥–Ω–µ–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n\n"

        "<b>üìä –õ–∏–º–∏—Ç—ã –ø–æ—Å—Ç–æ–≤:</b>\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ú–°–ö\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏ —Ä—É—á–Ω—ã–µ –ø–æ—Å—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è\n\n"

        "<b>üî¥ –°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        "‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚Ä¢ üü° –ò—Å—Ç–µ–∫–∞–µ—Ç - –º–µ–Ω–µ–µ —Å—É—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "‚Ä¢ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n"
        "‚Ä¢ ‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞\n\n"

        "<b>üí≥ –ü–ª–∞—Ç–µ–∂–∏:</b>\n"
        "‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω - –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ\n"
        "‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º\n\n"

        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ Telegram ID - –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n"
        "‚Ä¢ Username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"

        "üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

    await send_text_only(callback, text, get_profile_keyboard())
    await callback.answer()


@router.callback_query(F.data == "profile_gifts")
async def show_gift_subscriptions(callback: CallbackQuery, state: FSMContext):
    text = (
        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"

        "üåü <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É?</b>\n\n"

        "üéØ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ üé≤ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö\n"
        "‚Ä¢ üéà –ê–∫—Ü–∏–∏ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º\n"
        "‚Ä¢ üë• –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞)\n"
        "‚Ä¢ ‚≠ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ üìù –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"

        "üèÜ <b>–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üéä –ü—Ä–∏–≤–µ–¥–∏ 3 –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "‚Ä¢ üì± –ü–æ–¥–µ–ª–∏—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö - —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
        "‚Ä¢ üí¨ –û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ - –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã\n\n"

        "üì¢ <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏:</b>\n"
        "‚Ä¢ Telegram –∫–∞–Ω–∞–ª: @newsbot_channel\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö\n\n"

        "üí° <b>–°–æ–≤–µ—Ç:</b> –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ü–∏–∏!"
    )

    await send_text_only(callback, text, get_profile_keyboard())
    await callback.answer()


@router.callback_query(F.data == "profile_posting_settings")
async def show_posting_settings(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.autopost_setup)

    await state.update_data(
        channels=[],
        categories=[],
        style='',
        frequency=1,
        current_step='main'
    )

    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subscription_result = await db.execute(
                select(Subscription).where(
                    and_(
                        Subscription.user_id == user.id,
                        Subscription.is_active == True
                    )
                )
            )
            active_subscription = subscription_result.first()

            if not active_subscription:
                text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</b>\n\n"
                    "‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    "üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
                    "üì∫ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                    "üé® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤\n\n"
                    "üí° –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
                )
                await send_text_only(callback, text, get_profile_keyboard())
                await callback.answer()
                return

            autopost_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                )
            )
            user_settings = autopost_result.scalars().all()

            if user_settings:
                channels = list(set(setting.channel_id for setting in user_settings))
                categories = list(set(setting.category for setting in user_settings))
                styles = list(set(setting.style for setting in user_settings))
                frequencies = list(set(setting.posts_per_day for setting in user_settings))

                text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</b>\n\n"
                    "‚úÖ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                )

                if channels:
                    text += f"üì∫ <b>–ö–∞–Ω–∞–ª—ã ({len(channels)}):</b>\n"
                    for channel in channels[:3]:
                        text += f"‚Ä¢ {channel}\n"
                    if len(channels) > 3:
                        text += f"... –∏ –µ—â–µ {len(channels) - 3}\n"
                    text += "\n"

                if categories:
                    text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):</b>\n"
                    for category in categories[:4]:
                        text += f"‚Ä¢ {get_category_emoji_name(category)}\n"
                    if len(categories) > 4:
                        text += f"... –∏ –µ—â–µ {len(categories) - 4}\n"
                    text += "\n"

                if styles:
                    style_names = [get_style_emoji_name(style) for style in styles]
                    text += f"üé® <b>–°—Ç–∏–ª—å:</b> {', '.join(style_names)}\n\n"

                if frequencies:
                    freq_text = ', '.join([f"{f} —Ä–∞–∑ –≤ –¥–µ–Ω—å" for f in frequencies])
                    text += f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {freq_text}\n\n"

                text += "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
            else:
                text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</b>\n\n"
                    "üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n\n"
                    "‚ùå <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    "üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
                    "üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                    "üé® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤\n"
                    "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
                    "üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"
                )

            from bot.keyboards import get_autopost_setup_keyboard
            await send_text_only(callback, text, get_autopost_setup_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "autopost_new", UserStates.autopost_setup)
async def start_new_autopost_setup(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.adding_channel)
    await state.update_data(current_step='channels', step_number=1)

    text = (
        "üì∫ <b>–®–∞–≥ 1/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username\n\n"
        "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç"
    )

    from bot.keyboards import get_autopost_step_keyboard
    await send_text_only(callback, text, get_autopost_step_keyboard("channels", False))
    await callback.answer()


@router.callback_query(F.data == "autopost_add_channel", UserStates.adding_channel)
async def prompt_add_channel(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel)")


@router.message(UserStates.adding_channel)
async def process_add_channel_new(message: Message, state: FSMContext):
    channel_input = message.text.strip()

    if not (channel_input.startswith('@') or 'telegram.me/' in channel_input or 't.me/' in channel_input):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.",
            parse_mode='HTML'
        )
        return

    if channel_input.startswith('@'):
        channel_username = channel_input
    elif 'telegram.me/' in channel_input:
        channel_username = '@' + channel_input.split('telegram.me/')[1]
    elif 't.me/' in channel_input:
        channel_username = '@' + channel_input.split('t.me/')[1]
    else:
        channel_username = channel_input

    channel_username = channel_username.strip().split('?')[0]

    try:
        chat = await message.bot.get_chat(channel_username)
        chat_member = await message.bot.get_chat_member(channel_username, message.bot.id)

        if chat_member.status not in ['administrator']:
            await message.answer(
                f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {channel_username}</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode='HTML'
            )
            return

        if not chat_member.can_post_messages:
            await message.answer(
                f"‚ùå <b>–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ {channel_username}</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode='HTML'
            )
            return

        data = await state.get_data()
        channels = data.get('channels', [])

        if channel_username not in channels:
            channels.append(channel_username)
            await state.update_data(channels=channels)

            channels_text = '\n'.join([f"‚Ä¢ {ch}" for ch in channels])

            text = (
                "üì∫ <b>–®–∞–≥ 1/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
                "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username\n\n"
                "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤\n\n"
                f"üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n{channels_text}"
            )

            from bot.keyboards import get_autopost_step_keyboard
            await message.answer(
                text,
                reply_markup=get_autopost_step_keyboard("channels", False),
                parse_mode='HTML'
            )

            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} ({chat.title}) –¥–æ–±–∞–≤–ª–µ–Ω!",
                parse_mode='HTML'
            )
        else:
            await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")

    except Exception as e:
        error_msg = str(e)
        if "chat not found" in error_msg.lower():
            await message.answer(
                f"‚ùå <b>–ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∫–∞–Ω–∞–ª–∞.",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                parse_mode='HTML'
            )


@router.callback_query(F.data == "autopost_next_step")
async def next_autopost_step(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_step = data.get('current_step', 'channels')
    step_number = data.get('step_number', 1)

    if current_step == 'channels':
        channels = data.get('channels', [])
        if not channels:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª!", show_alert=True)
            return

        await state.set_state(UserStates.selecting_categories)
        await state.update_data(current_step='categories', step_number=2)

        text = (
            "üìÇ <b>–®–∞–≥ 2/4: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ 2-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            "üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
        )

        from bot.keyboards import get_category_selection_keyboard_new
        await send_text_only(callback, text, get_category_selection_keyboard_new())

    elif current_step == 'categories':
        categories = data.get('categories', [])
        if not categories:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
            return

        await state.set_state(UserStates.selecting_style)
        await state.update_data(current_step='style', step_number=3)

        text = (
            "üé® <b>–®–∞–≥ 3/4: –í—ã–±–æ—Ä —Å—Ç–∏–ª—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:\n\n"
            "üé© <b>–§–æ—Ä–º–∞–ª—å–Ω—ã–π</b> - –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å\n"
            "üòé <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π</b> - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω\n"
            "ü§™ <b>–ú–µ–º–Ω—ã–π</b> - —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n\n"
            "üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</b> –ù–µ –≤—ã–±—Ä–∞–Ω"
        )

        from bot.keyboards import get_style_selection_keyboard_new
        await send_text_only(callback, text, get_style_selection_keyboard_new())

    elif current_step == 'style':
        style = data.get('style', '')
        if not style:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å!", show_alert=True)
            return

        await state.set_state(UserStates.selecting_schedule)
        await state.update_data(current_step='schedule', step_number=4)

        text = (
            "‚è∞ <b>–®–∞–≥ 4/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:\n\n"
            "‚Ä¢ 1Ô∏è‚É£ <b>1 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 2Ô∏è‚É£ <b>2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ 3Ô∏è‚É£ <b>3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üéØ <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        )

        from bot.keyboards import get_schedule_selection_keyboard_new
        await send_text_only(callback, text, get_schedule_selection_keyboard_new())

    elif current_step == 'schedule':
        frequency = data.get('frequency', 0)
        if not frequency:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!", show_alert=True)
            return

        await state.set_state(UserStates.confirming_settings)
        await state.update_data(current_step='confirm')

        summary_text = format_autopost_summary(data)
        from bot.keyboards import get_confirmation_keyboard_autopost
        await send_text_only(callback, summary_text, get_confirmation_keyboard_autopost())

    await callback.answer()


@router.callback_query(F.data.startswith("autopost_toggle_cat_"))
async def toggle_category_new(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("autopost_toggle_cat_", "")

    data = await state.get_data()
    categories = data.get('categories', [])

    if category in categories:
        categories.remove(category)
        status = "—É–±—Ä–∞–Ω–∞"
    else:
        categories.append(category)
        status = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"

    await state.update_data(categories=categories)

    selected_text = ', '.join([get_category_emoji_name(cat) for cat in categories]) if categories else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    text = (
        "üìÇ <b>–®–∞–≥ 2/4: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ 2-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
        f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {selected_text}"
    )

    from bot.keyboards import get_category_selection_keyboard_new
    await callback.message.edit_text(
        text,
        reply_markup=get_category_selection_keyboard_new(categories),
        parse_mode='HTML'
    )

    await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {status}")


@router.callback_query(F.data.startswith("autopost_set_style_"))
async def set_style_new(callback: CallbackQuery, state: FSMContext):
    style = callback.data.replace("autopost_set_style_", "")

    await state.update_data(style=style)

    style_text = get_style_emoji_name(style)

    text = (
        "üé® <b>–®–∞–≥ 3/4: –í—ã–±–æ—Ä —Å—Ç–∏–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:\n\n"
        "üé© <b>–§–æ—Ä–º–∞–ª—å–Ω—ã–π</b> - –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å\n"
        "üòé <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π</b> - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω\n"
        "ü§™ <b>–ú–µ–º–Ω—ã–π</b> - —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n\n"
        f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</b> {style_text}"
    )

    from bot.keyboards import get_style_selection_keyboard_new
    await callback.message.edit_text(
        text,
        reply_markup=get_style_selection_keyboard_new(style),
        parse_mode='HTML'
    )

    await callback.answer(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style_text}")


@router.callback_query(F.data.startswith("autopost_set_schedule_"))
async def set_schedule_new(callback: CallbackQuery, state: FSMContext):
    frequency = int(callback.data.replace("autopost_set_schedule_", ""))

    await state.update_data(frequency=frequency)

    schedule_names = {
        1: "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (09:00)",
        2: "2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 21:00)",
        3: "3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 15:00, 21:00)"
    }

    schedule_text = schedule_names.get(frequency, "")

    text = (
        "‚è∞ <b>–®–∞–≥ 4/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:\n\n"
        "‚Ä¢ 1Ô∏è‚É£ <b>1 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ 2Ô∏è‚É£ <b>2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "‚Ä¢ 3Ô∏è‚É£ <b>3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {schedule_text}"
    )

    from bot.keyboards import get_schedule_selection_keyboard_new
    await callback.message.edit_text(
        text,
        reply_markup=get_schedule_selection_keyboard_new(frequency),
        parse_mode='HTML'
    )

    await callback.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {schedule_text}")


@router.callback_query(F.data == "autopost_save_all")
async def save_autopost_settings(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        channels = data.get('channels', [])
        categories = data.get('categories', [])
        style = data.get('style', 'formal')
        frequency = data.get('frequency', 1)

        if not channels or not categories:
            await callback.answer("‚ùå –ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!", show_alert=True)
            return

        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            await db.execute(
                delete(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                )
            )

            schedule_times = get_schedule_times(frequency)

            for channel in channels:
                for category in categories:
                    setting = AutopostSettings(
                        user_id=user.id,
                        channel_id=channel,
                        category=category,
                        style=style,
                        posts_per_day=frequency,
                        specific_times=schedule_times,
                        is_active=True
                    )
                    db.add(setting)

            await db.commit()

            text = (
                "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª—ã:</b> {len(channels)} —à—Ç.\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {len(categories)} —à—Ç.\n"
                f"üé® <b>–°—Ç–∏–ª—å:</b> {get_style_emoji_name(style)}\n"
                f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
                "üöÄ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
            )

            await send_text_only(callback, text, get_profile_keyboard())
            await state.clear()
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await send_text_only(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "autopost_back_step")
async def back_autopost_step(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_step = data.get('current_step', 'channels')

    if current_step == 'categories':
        await state.set_state(UserStates.adding_channel)
        await state.update_data(current_step='channels', step_number=1)

        channels = data.get('channels', [])
        channels_text = '\n'.join([f"‚Ä¢ {ch}" for ch in channels]) if channels else "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç"

        text = (
            "üì∫ <b>–®–∞–≥ 1/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username\n\n"
            "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤\n\n"
            f"üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n{channels_text}"
        )

        from bot.keyboards import get_autopost_step_keyboard
        await send_text_only(callback, text, get_autopost_step_keyboard("channels", False))

    elif current_step == 'style':
        await state.set_state(UserStates.selecting_categories)
        await state.update_data(current_step='categories', step_number=2)

        categories = data.get('categories', [])
        selected_text = ', '.join(
            [get_category_emoji_name(cat) for cat in categories]) if categories else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

        text = (
            "üìÇ <b>–®–∞–≥ 2/4: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ 2-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {selected_text}"
        )

        from bot.keyboards import get_category_selection_keyboard_new
        await send_text_only(callback, text, get_category_selection_keyboard_new(categories))

    elif current_step == 'schedule':
        await state.set_state(UserStates.selecting_style)
        await state.update_data(current_step='style', step_number=3)

        style = data.get('style', '')
        style_text = get_style_emoji_name(style) if style else "–ù–µ –≤—ã–±—Ä–∞–Ω"

        text = (
            "üé® <b>–®–∞–≥ 3/4: –í—ã–±–æ—Ä —Å—Ç–∏–ª—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:\n\n"
            "üé© <b>–§–æ—Ä–º–∞–ª—å–Ω—ã–π</b> - –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å\n"
            "üòé <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π</b> - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω\n"
            "ü§™ <b>–ú–µ–º–Ω—ã–π</b> - —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n\n"
            f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</b> {style_text}"
        )

        from bot.keyboards import get_style_selection_keyboard_new
        await send_text_only(callback, text, get_style_selection_keyboard_new(style))

    elif current_step == 'confirm':
        await state.set_state(UserStates.selecting_schedule)
        await state.update_data(current_step='schedule', step_number=4)

        frequency = data.get('frequency', 0)
        schedule_names = {
            1: "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (09:00)",
            2: "2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 21:00)",
            3: "3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00, 15:00, 21:00)"
        }
        schedule_text = schedule_names.get(frequency, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

        text = (
            "‚è∞ <b>–®–∞–≥ 4/4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:\n\n"
            "‚Ä¢ 1Ô∏è‚É£ <b>1 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 2Ô∏è‚É£ <b>2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ 3Ô∏è‚É£ <b>3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            f"üéØ <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {schedule_text}"
        )

        from bot.keyboards import get_schedule_selection_keyboard_new
        await send_text_only(callback, text, get_schedule_selection_keyboard_new(frequency))

    await callback.answer()


@router.callback_query(F.data == "autopost_edit_settings")
async def edit_autopost_settings(callback: CallbackQuery, state: FSMContext):
    await start_new_autopost_setup(callback, state)


@router.callback_query(F.data == "autopost_cancel")
async def cancel_autopost_setup(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    text = (
        "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å."
    )

    await send_text_only(callback, text, get_profile_keyboard())
    await callback.answer()


@router.callback_query(F.data == "autopost_edit")
async def edit_existing_autopost(callback: CallbackQuery, state: FSMContext):
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                )
            )
            settings = settings_result.scalars().all()

            if not settings:
                text = (
                    "‚ùå <b>–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞."
                )
                from bot.keyboards import get_autopost_setup_keyboard
                await send_text_only(callback, text, get_autopost_setup_keyboard())
                await callback.answer()
                return

            channels = list(set(s.channel_id for s in settings))
            categories = list(set(s.category for s in settings))
            style = settings[0].style if settings else 'formal'
            frequency = settings[0].posts_per_day if settings else 1

            await state.update_data(
                channels=channels,
                categories=categories,
                style=style,
                frequency=frequency,
                current_step='main'
            )

            summary_text = format_autopost_summary({
                'channels': channels,
                'categories': categories,
                'style': style,
                'frequency': frequency
            })

            summary_text += "\n\nüí° –ù–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"

            from bot.keyboards import get_confirmation_keyboard_autopost
            await send_text_only(callback, summary_text, get_confirmation_keyboard_autopost())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        from bot.keyboards import get_autopost_setup_keyboard
        await send_text_only(callback, text, get_autopost_setup_keyboard())

    await callback.answer()


@router.callback_query(F.data == "autopost_delete")
async def delete_autopost_settings(callback: CallbackQuery, state: FSMContext):
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            result = await db.execute(
                delete(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                )
            )

            await db.commit()

            if result.rowcount > 0:
                text = (
                    "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω—ã</b>\n\n"
                    f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {result.rowcount}\n\n"
                    "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
                )
            else:
                text = (
                    "‚ö†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                )

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        await send_text_only(callback, text, get_profile_keyboard())

    await callback.answer()


@router.callback_query(F.data == "profile_back")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await show_profile(callback, state)

@router.callback_query(F.data == "manual_post")
async def show_manual_post_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subscription_result = await db.execute(
                select(Subscription).where(
                    and_(
                        Subscription.user_id == user.id,
                        Subscription.is_active == True,
                        Subscription.expires_at > datetime.utcnow()
                    )
                )
            )
            active_subscription = subscription_result.first()

            if not active_subscription:
                text = (
                    "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                    "‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    "–î–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏"
                )
                await send_text_only(callback, text, get_profile_keyboard())
                await callback.answer()
                return

            autopost_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = autopost_result.scalar_one_or_none()

            if not setting:
                text = (
                    "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                    "‚ùå <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞'.\n\n"
                    "üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"
                )
                await send_text_only(callback, text, get_profile_keyboard())
                await callback.answer()
                return

            text = (
                "üì§ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                "üöÄ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å</b> - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞\n"
                "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "üìä <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {setting.channel_id}\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {get_category_emoji_name(setting.category)}\n"
                f"üé® <b>–°—Ç–∏–ª—å:</b> {get_style_emoji_name(setting.style)}"
            )

            from bot.keyboards import get_manual_post_keyboard
            await send_text_only(callback, text, get_manual_post_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await send_text_only(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", get_profile_keyboard())

    await callback.answer()


@router.callback_query(F.data == "manual_send_now")
async def manual_send_now(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = settings_result.scalar_one_or_none()

            if not setting:
                await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return

            send_manual_post.delay(
                user_id=user.id,
                channel_id=setting.channel_id,
                category=setting.category,
                style=setting.style
            )

            text = (
                "üöÄ <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è!</b>\n\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {setting.channel_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(setting.category)}\n"
                f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(setting.style)}\n\n"
                "‚è≥ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã"
            )

            await send_text_only(callback, text, get_profile_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞", show_alert=True)


@router.callback_query(F.data == "manual_schedule")
async def manual_schedule_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    await state.set_state(UserStates.scheduling_manual_post)

    text = (
        "‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15:23</code> –∏–ª–∏ <code>09:00</code>\n\n"
        "üìÖ –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≤—Ç—Ä–∞\n\n"
        "üí° –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:"
    )

    from bot.keyboards import get_manual_schedule_cancel_keyboard
    await send_text_only(callback, text, get_manual_schedule_cancel_keyboard())
    await callback.answer()


@router.message(UserStates.scheduling_manual_post)
async def process_schedule_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    time_input = message.text.strip()

    try:
        hour, minute = map(int, time_input.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:23)",
            parse_mode='HTML'
        )
        return

    try:
        async for db in get_db():
            user_result = await db.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            settings_result = await db.execute(
                select(AutopostSettings).where(
                    and_(
                        AutopostSettings.user_id == user.id,
                        AutopostSettings.is_active == True
                    )
                ).limit(1)
            )
            setting = settings_result.scalar_one_or_none()

            if not setting:
                await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            schedule_post_at_time.delay(
                user_id=user.id,
                channel_id=setting.channel_id,
                category=setting.category,
                style=setting.style,
                target_time=time_input
            )

            now = datetime.now()
            target_hour, target_minute = hour, minute
            target_datetime = now.replace(hour=target_hour, minute=target_minute, second=0)

            if target_datetime <= now:
                target_datetime += timedelta(days=1)
                day_text = "–∑–∞–≤—Ç—Ä–∞"
            else:
                day_text = "—Å–µ–≥–æ–¥–Ω—è"

            text = (
                "‚úÖ <b>–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {time_input} ({day_text})\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {setting.channel_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(setting.category)}\n"
                f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(setting.style)}\n\n"
                "üîî –ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            )

            await message.answer(text, reply_markup=get_profile_keyboard(), parse_mode='HTML')
            await state.clear()
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")
