from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func, desc
from datetime import datetime, timedelta
from database.models import User, Subscription, Transaction
from database.database import get_db
from bot.keyboards import (
    get_admin_keyboard, get_admin_back_keyboard,
    get_admin_users_keyboard, get_admin_sources_keyboard,
    get_admin_categories_keyboard, get_admin_tokens_keyboard,
    get_admin_sites_keyboard, get_admin_logs_keyboard
)
from bot.states import AdminStates
from config.settings import settings
import logging
import uuid

router = Router()


async def send_text_only(callback: CallbackQuery, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å —Ñ–æ—Ç–æ)"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    is_admin_user = user_id in settings.ADMIN_IDS

    logging.info(f"üîç Admin check - User ID: {user_id}, Admin IDs: {settings.ADMIN_IDS}, Is admin: {is_admin_user}")

    if not is_admin_user:
        logging.warning(f"‚ùå Unauthorized admin access attempt by user {user_id}")
    else:
        logging.info(f"‚úÖ Admin access granted to user {user_id}")

    return is_admin_user


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await state.set_state(AdminStates.main_menu)

    admin_text = (
        "üõ°Ô∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å NewsBot</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.first_name}\n"
        f"üÜî ID: <code>{message.from_user.id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await message.answer(
        admin_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == "admin_users")
@router.callback_query(F.data.startswith("admin_users_page_"))
async def show_users(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 0
    if callback.data.startswith("admin_users_page_"):
        page = int(callback.data.split("_")[-1])

    try:
        async for db in get_db():
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            count_result = await db.execute(
                select(func.count(Subscription.id)).where(Subscription.is_active == True)
            )
            total_count = count_result.scalar()

            users_per_page = 10
            total_pages = (total_count + users_per_page - 1) // users_per_page
            offset = page * users_per_page

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            result = await db.execute(
                select(Subscription, User)
                .join(User)
                .where(Subscription.is_active == True)
                .order_by(Subscription.expires_at.desc())
                .offset(offset)
                .limit(users_per_page)
            )
            subscriptions = result.all()

            if not subscriptions and page == 0:
                await send_text_only(
                    callback,
                    "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                    get_admin_users_keyboard(page, total_pages)
                )
            else:
                users_text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"

                for subscription, user in subscriptions:
                    expires_date = subscription.expires_at.strftime('%d.%m.%Y %H:%M')
                    username = f"@{user.username}" if user.username else f"ID: {user.telegram_id}"

                    users_text += (
                        f"üë§ {username}\n"
                        f"üì¶ –¢–∞—Ä–∏—Ñ: {subscription.plan_type} –¥–Ω–µ–π\n"
                        f"‚è∞ –î–æ: {expires_date}\n\n"
                    )

                await send_text_only(callback, users_text, get_admin_users_keyboard(page, total_pages))
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await send_text_only(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            get_admin_back_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_add_subscription")
async def add_subscription_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.adding_subscription)

    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>telegram_id|–¥–Ω–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>123456789|30</code>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b> 7, 14, 30 –¥–Ω–µ–π"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.adding_subscription)
async def process_add_subscription(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>telegram_id|–¥–Ω–∏</code>",
                parse_mode='HTML'
            )
            return

        telegram_id, days = [part.strip() for part in parts]

        if not telegram_id.isdigit() or not days.isdigit():
            await message.answer("‚ùå ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return

        telegram_id = int(telegram_id)
        days = int(days)

        if days not in [7, 14, 30]:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω—ã: 7, 14, 30 –¥–Ω–µ–π")
            return

        async for db in get_db():
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await db.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            expires_at = datetime.utcnow() + timedelta(days=days)
            subscription = Subscription(
                user_id=user.id,
                plan_type=days,
                expires_at=expires_at,
                is_active=True
            )
            db.add(subscription)
            await db.commit()

            success_text = (
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'Unknown'}\n"
                f"üÜî Telegram ID: {telegram_id}\n"
                f"üì¶ –ü–ª–∞–Ω: {days} –¥–Ω–µ–π\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}"
            )

            await message.answer(
                success_text,
                reply_markup=get_admin_back_keyboard(),
                parse_mode='HTML'
            )

            logging.info(f"Admin {message.from_user.id} added subscription: {telegram_id}|{days} days")
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_disable_subscription")
async def disable_subscription_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.disabling_subscription)

    text = (
        "üóë <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>123456789</code>"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.disabling_subscription)
async def process_disable_subscription(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        telegram_id = message.text.strip()

        if not telegram_id.isdigit():
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        telegram_id = int(telegram_id)

        async for db in get_db():
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await db.execute(
                select(Subscription, User)
                .join(User)
                .where(
                    and_(
                        User.telegram_id == telegram_id,
                        Subscription.is_active == True
                    )
                )
            )
            subscription_user = result.first()

            if not subscription_user:
                await message.answer(f"‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            subscription, user = subscription_user

            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription.is_active = False
            await db.commit()

            success_text = (
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'Unknown'}\n"
                f"üÜî Telegram ID: {telegram_id}\n"
                f"üì¶ –ë—ã–ª –ø–ª–∞–Ω: {subscription.plan_type} –¥–Ω–µ–π"
            )

            await message.answer(
                success_text,
                reply_markup=get_admin_back_keyboard(),
                parse_mode='HTML'
            )

            logging.info(f"Admin {message.from_user.id} disabled subscription for user {telegram_id}")
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_search_user")
async def search_user_prompt(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.searching_user)

    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –∏–ª–∏ username:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>123456789</code>\n"
        "<code>@username</code>"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.searching_user)
async def process_search_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        search_query = message.text.strip()

        async for db in get_db():
            if search_query.startswith('@'):
                # –ü–æ–∏—Å–∫ –ø–æ username
                username = search_query[1:]
                result = await db.execute(
                    select(User, Subscription)
                    .outerjoin(Subscription)
                    .where(User.username == username)
                )
            elif search_query.isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ Telegram ID
                telegram_id = int(search_query)
                result = await db.execute(
                    select(User, Subscription)
                    .outerjoin(Subscription)
                    .where(User.telegram_id == telegram_id)
                )
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞")
                return

            user_data = result.all()

            if not user_data:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{search_query}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    parse_mode='HTML'
                )
                return

            user = user_data[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            subscriptions = [row[1] for row in user_data if row[1]]

            result_text = (
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"üÜî ID: <code>{user.telegram_id}</code>\n"
                f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )

            if subscriptions:
                result_text += "<b>üì¶ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
                for sub in subscriptions:
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    result_text += (
                        f"‚Ä¢ {sub.plan_type} –¥–Ω–µ–π - {status}\n"
                        f"  –î–æ: {sub.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                    )
            else:
                result_text += "‚ùå –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç"

            await message.answer(
                result_text,
                reply_markup=get_admin_back_keyboard(),
                parse_mode='HTML'
            )
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_sources")
async def show_sources_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    text = (
        "üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"
    )

    await send_text_only(callback, text, get_admin_sources_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_list_sources")
async def list_sources(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏–ª–∏ –ë–î
    sources_text = (
        "üìã <b>–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>\n\n"
        "<b>IT & Tech:</b>\n"
        "‚Ä¢ DOU.ua - https://dou.ua/rss/articles\n"
        "‚Ä¢ ITC.ua - https://itc.ua/feed/\n\n"
        "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        "‚Ä¢ ForkLog - https://forklog.com/feed/\n"
        "‚Ä¢ CoinDesk - https://coindesk.com/arc/outboundfeeds/rss/\n\n"
        "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏"
    )

    await send_text_only(callback, sources_text, get_admin_sources_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_add_source")
async def add_news_source(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.adding_source)

    text = (
        "üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|url</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>it|–•–∞–±—Ä|https://habr.com/ru/rss/hub/programming/</code>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        "‚Ä¢ it, crypto, business, general\n"
        "‚Ä¢ esports, tech, politics, science\n"
        "‚Ä¢ auto, health, entertainment, sport"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.adding_source)
async def process_add_source(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|url</code>",
                parse_mode='HTML'
            )
            return

        category, name, url = [part.strip() for part in parts]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not url.startswith(('http://', 'https://')):
            await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        success_text = (
            "‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
            f"üì∞ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"üîó URL: <code>{url}</code>\n\n"
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."
        )

        await message.answer(
            success_text,
            reply_markup=get_admin_back_keyboard(),
            parse_mode='HTML'
        )

        logging.info(f"Admin {message.from_user.id} added source: {category}|{name}|{url}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_categories")
async def show_categories_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    text = (
        "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"
    )

    await send_text_only(callback, text, get_admin_categories_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_list_categories")
async def list_categories(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    categories_text = (
        "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
        "üíª <b>it</b> - IT & Tech\n"
        "‚Çø <b>crypto</b> - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "üíº <b>business</b> - –ë–∏–∑–Ω–µ—Å\n"
        "üåç <b>general</b> - –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üéÆ <b>esports</b> - –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç\n"
        "üì± <b>tech</b> - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "üèõÔ∏è <b>politics</b> - –ü–æ–ª–∏—Ç–∏–∫–∞\n"
        "üî¨ <b>science</b> - –ù–∞—É–∫–∞\n"
        "üöó <b>auto</b> - –ê–≤—Ç–æ\n"
        "üíä <b>health</b> - –ó–¥–æ—Ä–æ–≤—å–µ\n"
        "üé≠ <b>entertainment</b> - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
        "‚öΩ <b>sport</b> - –°–ø–æ—Ä—Ç"
    )

    await send_text_only(callback, categories_text, get_admin_categories_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_add_category")
async def add_category(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.adding_category)

    text = (
        "üìÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|—ç–º–æ–¥–∑–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>gaming|–ò–≥—Ä—ã|üéÆ</code>\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ö–æ–¥ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
        "‚Ä¢ –û–¥–∏–Ω —ç–º–æ–¥–∑–∏"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.adding_category)
async def process_add_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|—ç–º–æ–¥–∑–∏</code>",
                parse_mode='HTML'
            )
            return

        code, name, emoji = [part.strip() for part in parts]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not code.isalpha() or not code.islower():
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã")
            return

        if len(emoji) != 1:
            await message.answer("‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        success_text = (
            "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üî§ –ö–æ–¥: <b>{code}</b>\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"üòÄ –≠–º–æ–¥–∑–∏: {emoji}\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"
        )

        await message.answer(
            success_text,
            reply_markup=get_admin_back_keyboard(),
            parse_mode='HTML'
        )

        logging.info(f"Admin {message.from_user.id} added category: {code}|{name}|{emoji}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_tokens")
async def show_tokens_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    text = (
        "üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API"
    )

    await send_text_only(callback, text, get_admin_tokens_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_list_tokens")
async def list_tokens(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API —Ç–æ–∫–µ–Ω–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î
    tokens_text = (
        "üìã <b>–°–ø–∏—Å–æ–∫ API —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
        "üü¢ <b>example.com</b>\n"
        "üìß Email: admin@example.com\n"
        "üîë Token: abc123***\n"
        "üìÖ –°–æ–∑–¥–∞–Ω: 01.06.2025\n\n"
        "üî¥ <b>test.ua</b>\n"
        "üìß Email: test@test.ua\n"
        "üîë Token: xyz789***\n"
        "üìÖ –°–æ–∑–¥–∞–Ω: 25.05.2025\n"
        "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
        "üí° –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: 2 (1 –∞–∫—Ç–∏–≤–Ω—ã–π)"
    )

    await send_text_only(callback, tokens_text, get_admin_tokens_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_create_token")
async def create_token_prompt(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API —Ç–æ–∫–µ–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.creating_token)

    text = (
        "üîê <b>–°–æ–∑–¥–∞–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>email|–¥–æ–º–µ–Ω</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>admin@example.com|example.com</code>"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.creating_token)
async def process_create_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>email|–¥–æ–º–µ–Ω</code>",
                parse_mode='HTML'
            )
            return

        email, domain = [part.strip() for part in parts]

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in email:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = str(uuid.uuid4())

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î

        success_text = (
            "‚úÖ <b>API —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìß Email: <b>{email}</b>\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain}</b>\n"
            f"üîë –¢–æ–∫–µ–Ω: <code>{token}</code>\n\n"
            "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!"
        )

        await message.answer(
            success_text,
            reply_markup=get_admin_back_keyboard(),
            parse_mode='HTML'
        )

        logging.info(f"Admin {message.from_user.id} created API token for {email}|{domain}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_sites")
async def show_sites_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    text = (
        "üåê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–π—Ç–∞–º–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫ API"
    )

    await send_text_only(callback, text, get_admin_sites_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_list_sites")
async def list_sites(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    sites_text = (
        "üìã <b>–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤</b>\n\n"
        "üü¢ <b>Example News</b>\n"
        "üåê –î–æ–º–µ–Ω: example.com\n"
        "üîë –¢–æ–∫–µ–Ω: abc123***\n"
        "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n"
        "üî¥ <b>Test Site</b>\n"
        "üåê –î–æ–º–µ–Ω: test.ua\n"
        "üîë –¢–æ–∫–µ–Ω: xyz789***\n"
        "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
        "üí° –í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤: 2 (1 –∞–∫—Ç–∏–≤–Ω—ã–π)"
    )

    await send_text_only(callback, sites_text, get_admin_sites_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_logs")
@router.callback_query(F.data.startswith("admin_logs_page_"))
async def show_logs(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 0
    if callback.data.startswith("admin_logs_page_"):
        page = int(callback.data.split("_")[-1])

    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ë–î
    logs_per_page = 10
    total_logs = 25
    total_pages = (total_logs + logs_per_page - 1) // logs_per_page

    logs_text = f"üìú <b>–õ–æ–≥–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"

    # –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
    sample_logs = [
        "01.06.2025 21:00 - ID:123456 - –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: it|–•–∞–±—Ä|...",
        "01.06.2025 20:45 - ID:123456 - –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è example.com",
        "01.06.2025 20:30 - ID:123456 - –û—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: 987654321",
        "01.06.2025 20:15 - ID:123456 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: gaming|–ò–≥—Ä—ã|üéÆ",
        "01.06.2025 20:00 - ID:123456 - –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
    ]

    start_idx = page * logs_per_page
    end_idx = start_idx + logs_per_page

    for i, log in enumerate(sample_logs[start_idx:end_idx], 1):
        logs_text += f"{start_idx + i}. {log}\n"

    await send_text_only(callback, logs_text, get_admin_logs_keyboard(page, total_pages))
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_purchase_stats(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        async for db in get_db():
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            start_date = datetime.utcnow() - timedelta(days=30)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            result = await db.execute(
                select(Transaction).where(
                    and_(
                        Transaction.status == 'completed',
                        Transaction.created_at >= start_date
                    )
                )
            )
            transactions = result.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            today_transactions = [t for t in transactions if t.created_at >= today_start]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            plans_stats = {}
            for transaction in transactions:
                if transaction.amount == 100:
                    plans_stats['7_days'] = plans_stats.get('7_days', 0) + 1
                elif transaction.amount == 180:
                    plans_stats['14_days'] = plans_stats.get('14_days', 0) + 1
                elif transaction.amount == 300:
                    plans_stats['30_days'] = plans_stats.get('30_days', 0) + 1

            total_amount = sum(t.amount for t in transactions)
            today_amount = sum(t.amount for t in today_transactions)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_subs_result = await db.execute(
                select(func.count(Subscription.id)).where(Subscription.is_active == True)
            )
            active_subs_count = active_subs_result.scalar()

            stats_text = (
                "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {active_subs_count}\n\n"

                f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>\n"
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount} ‚≠ê</b>\n"
                f"üì¶ –ü–æ–∫—É–ø–æ–∫: <b>{len(transactions)}</b>\n"
                f"üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{total_amount / len(transactions) if transactions else 0:.1f} ‚≠ê</b>\n\n"

                f"üóìÔ∏è <b>–°–µ–≥–æ–¥–Ω—è:</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{today_amount} ‚≠ê</b>\n"
                f"üì¶ –ü–æ–∫—É–ø–æ–∫: <b>{len(today_transactions)}</b>\n\n"

                f"üìä <b>–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º (30 –¥–Ω–µ–π):</b>\n"
                f"‚Ä¢ 7 –¥–Ω–µ–π: <b>{plans_stats.get('7_days', 0)}</b> —à—Ç (100‚≠ê)\n"
                f"‚Ä¢ 14 –¥–Ω–µ–π: <b>{plans_stats.get('14_days', 0)}</b> —à—Ç (180‚≠ê)\n"
                f"‚Ä¢ 30 –¥–Ω–µ–π: <b>{plans_stats.get('30_days', 0)}</b> —à—Ç (300‚≠ê)\n\n"

                f"üí° <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>\n"
                f"‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω: {max(plans_stats.items(), key=lambda x: x[1])[0] if plans_stats else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sum(int(k.split('_')[0]) * v for k, v in plans_stats.items()) / sum(plans_stats.values()) if plans_stats else 0:.1f} –¥–Ω–µ–π"
            )

            await send_text_only(callback, stats_text, get_admin_back_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await send_text_only(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            get_admin_back_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.main_menu)

    admin_text = (
        "üõ°Ô∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å NewsBot</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.first_name}\n"
        f"üÜî ID: <code>{callback.from_user.id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="admin_sources")],
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")],
        [InlineKeyboardButton(text="üîê API —Ç–æ–∫–µ–Ω—ã", callback_data="admin_tokens")],
        [InlineKeyboardButton(text="üåê –°–∞–π—Ç—ã", callback_data="admin_sites")],
        [InlineKeyboardButton(text="üìú –õ–æ–≥–∏", callback_data="admin_logs")],
        [InlineKeyboardButton(text="üè† –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="back_to_main")]
    ])

    await send_text_only(callback, admin_text, keyboard)
    await callback.answer()


@router.callback_query(F.data.in_([
    "admin_delete_source", "admin_delete_category",
    "admin_delete_token", "admin_add_site", "admin_delete_site", "noop"
]))
async def placeholder_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)