from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func
from datetime import datetime, timedelta
from database.models import User, Subscription, Transaction
from database.database import get_db
from bot.keyboards import get_admin_keyboard, get_admin_back_keyboard
from bot.states import AdminStates
from config.settings import settings
import logging

router = Router()


async def send_text_only(callback: CallbackQuery, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å —Ñ–æ—Ç–æ)"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    is_admin_user = user_id in settings.ADMIN_IDS

    logging.info(f"üîç Admin check - User ID: {user_id}, Admin IDs: {settings.ADMIN_IDS}, Is admin: {is_admin_user}")

    if not is_admin_user:
        logging.warning(f"‚ùå Unauthorized admin access attempt by user {user_id}")
    else:
        logging.info(f"‚úÖ Admin access granted to user {user_id}")

    return is_admin_user


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await state.set_state(AdminStates.main_menu)

    admin_text = (
        "üõ°Ô∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å NewsBot</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.first_name}\n"
        f"üÜî ID: <code>{message.from_user.id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(
        admin_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == "admin_add_source")
async def add_news_source(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.adding_source)

    text = (
        "üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|url</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>it|–•–∞–±—Ä|https://habr.com/ru/rss/hub/programming/</code>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        "‚Ä¢ it, crypto, business, general\n"
        "‚Ä¢ esports, tech, politics, science\n"
        "‚Ä¢ auto, health, entertainment, sport"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.adding_source)
async def process_add_source(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|url</code>",
                parse_mode='HTML'
            )
            return

        category, name, url = [part.strip() for part in parts]

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ

        success_text = (
            "‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
            f"üì∞ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"üîó URL: <code>{url}</code>\n\n"
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."
        )

        await message.answer(
            success_text,
            reply_markup=get_admin_back_keyboard(),
            parse_mode='HTML'
        )

        logging.info(f"Admin {message.from_user.id} added source: {category}|{name}|{url}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_add_category")
async def add_category(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.adding_category)

    text = (
        "üìÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|—ç–º–æ–¥–∑–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>gaming|–ò–≥—Ä—ã|üéÆ</code>\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ö–æ–¥ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
        "‚Ä¢ –û–¥–∏–Ω —ç–º–æ–¥–∑–∏"
    )

    await send_text_only(callback, text, get_admin_back_keyboard())
    await callback.answer()


@router.message(AdminStates.adding_category)
async def process_add_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|—ç–º–æ–¥–∑–∏</code>",
                parse_mode='HTML'
            )
            return

        code, name, emoji = [part.strip() for part in parts]

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        success_text = (
            "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üî§ –ö–æ–¥: <b>{code}</b>\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"üòÄ –≠–º–æ–¥–∑–∏: {emoji}\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"
        )

        await message.answer(
            success_text,
            reply_markup=get_admin_back_keyboard(),
            parse_mode='HTML'
        )

        logging.info(f"Admin {message.from_user.id} added category: {code}|{name}|{emoji}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_admin_back_keyboard()
        )


@router.callback_query(F.data == "admin_stats")
async def show_purchase_stats(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        async for db in get_db():
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            start_date = datetime.utcnow() - timedelta(days=30)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            result = await db.execute(
                select(Transaction).where(
                    and_(
                        Transaction.status == 'completed',
                        Transaction.created_at >= start_date
                    )
                )
            )
            transactions = result.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            today_transactions = [t for t in transactions if t.created_at >= today_start]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            plans_stats = {}
            for transaction in transactions:
                if transaction.amount == 100:
                    plans_stats['7_days'] = plans_stats.get('7_days', 0) + 1
                elif transaction.amount == 180:
                    plans_stats['14_days'] = plans_stats.get('14_days', 0) + 1
                elif transaction.amount == 300:
                    plans_stats['30_days'] = plans_stats.get('30_days', 0) + 1

            total_amount = sum(t.amount for t in transactions)
            today_amount = sum(t.amount for t in today_transactions)

            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫</b>\n\n"
                f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>\n"
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount} ‚≠ê</b>\n"
                f"üì¶ –ü–æ–∫—É–ø–æ–∫: <b>{len(transactions)}</b>\n"
                f"üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{total_amount / len(transactions) if transactions else 0:.1f} ‚≠ê</b>\n\n"

                f"üóìÔ∏è <b>–°–µ–≥–æ–¥–Ω—è:</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{today_amount} ‚≠ê</b>\n"
                f"üì¶ –ü–æ–∫—É–ø–æ–∫: <b>{len(today_transactions)}</b>\n\n"

                f"üìä <b>–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º (30 –¥–Ω–µ–π):</b>\n"
                f"‚Ä¢ 7 –¥–Ω–µ–π: <b>{plans_stats.get('7_days', 0)}</b> —à—Ç\n"
                f"‚Ä¢ 14 –¥–Ω–µ–π: <b>{plans_stats.get('14_days', 0)}</b> —à—Ç\n"
                f"‚Ä¢ 30 –¥–Ω–µ–π: <b>{plans_stats.get('30_days', 0)}</b> —à—Ç"
            )

            await send_text_only(callback, stats_text, get_admin_back_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await send_text_only(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            get_admin_back_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def show_subscribed_users(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        async for db in get_db():
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            result = await db.execute(
                select(Subscription, User).join(User).where(
                    Subscription.is_active == True
                ).order_by(Subscription.expires_at.desc())
            )
            subscriptions = result.all()

            if not subscriptions:
                await send_text_only(
                    callback,
                    "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                    get_admin_back_keyboard()
                )
                await callback.answer()
                return

            users_text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"

            for subscription, user in subscriptions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                expires_date = subscription.expires_at.strftime('%d.%m.%Y %H:%M')
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"

                users_text += (
                    f"üë§ {username}\n"
                    f"üÜî <code>{user.telegram_id}</code>\n"
                    f"üì¶ –¢–∞—Ä–∏—Ñ: {subscription.plan_type} –¥–Ω–µ–π\n"
                    f"‚è∞ –î–æ: {expires_date}\n\n"
                )

            if len(subscriptions) > 10:
                users_text += f"... –∏ –µ—â–µ {len(subscriptions) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

            await send_text_only(callback, users_text, get_admin_back_keyboard())
            break

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await send_text_only(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            get_admin_back_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.main_menu)

    admin_text = (
        "üõ°Ô∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å NewsBot</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.first_name}\n"
        f"üÜî ID: <code>{callback.from_user.id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await send_text_only(callback, admin_text, get_admin_keyboard())
    await callback.answer()