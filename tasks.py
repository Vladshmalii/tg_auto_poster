from celery_app import celery_app
from aiogram import Bot
from database.database import async_session
from services.autopost_service import AutopostService
from config.settings import settings
from database.models import TestPostLimit
from sqlalchemy import delete
from datetime import datetime, timedelta, date, timezone
import asyncio
import logging

logger = logging.getLogger(__name__)

MOSCOW_TZ = timezone(timedelta(hours=3))


def get_category_emoji_name(category):
    category_map = {
        'it': 'üíª IT & Tech',
        'crypto': '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'business': 'üíº –ë–∏–∑–Ω–µ—Å',
        'general': 'üåç –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'esports': 'üéÆ –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç',
        'tech': 'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'science': 'üî¨ –ù–∞—É–∫–∞',
        'auto': 'üöó –ê–≤—Ç–æ',
        'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'sport': '‚öΩ –°–ø–æ—Ä—Ç'
    }
    return category_map.get(category, f"üìÑ {category}")


def get_style_emoji_name(style):
    style_map = {
        'formal': 'üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π',
        'casual': 'üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π',
        'meme': 'ü§™ –ú–µ–º–Ω—ã–π'
    }
    return style_map.get(style, f"‚úèÔ∏è {style}")


@celery_app.task
def process_autoposts():
    """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤"""
    asyncio.run(_process_autoposts_async())


async def _process_autoposts_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤"""
    bot = Bot(token=settings.BOT_TOKEN)
    autopost_service = AutopostService(bot)

    async with async_session() as db:
        await autopost_service.process_autoposts(db)

    await bot.session.close()


@celery_app.task
def cleanup_old_test_post_limits():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
    asyncio.run(_cleanup_old_test_post_limits_async())


async def _cleanup_old_test_post_limits_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        async with async_session() as db:
            cutoff_date = date.today() - timedelta(days=30)

            result = await db.execute(
                delete(TestPostLimit).where(TestPostLimit.test_date < cutoff_date)
            )

            await db.commit()

            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {result.rowcount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")


@celery_app.task
def send_manual_post(user_id: int, channel_id: str, category: str, style: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
    asyncio.run(_send_manual_post_async(user_id, channel_id, category, style))


@celery_app.task
def schedule_post_at_time(user_id: int, channel_id: str, category: str, style: str, target_time: str):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:23)"""
    asyncio.run(_schedule_post_async(user_id, channel_id, category, style, target_time))


async def _send_manual_post_async(user_id: int, channel_id: str, category: str, style: str):
    logger.info(
        f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞: user_id={user_id}, channel_id={channel_id}, category={category}, style={style}")
    bot = Bot(token=settings.BOT_TOKEN)
    autopost_service = AutopostService(bot)

    try:
        async with async_session() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            from database.models import User, PostLog
            from sqlalchemy import select, func, and_
            from datetime import date

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await db.execute(
                select(User).where(User.id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            posts_today_result = await db.execute(
                select(func.count(PostLog.id)).where(
                    and_(
                        PostLog.user_id == user_id,
                        PostLog.channel_id == channel_id,
                        PostLog.created_at >= today
                    )
                )
            )
            posts_today = posts_today_result.scalar() or 0

            # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å
            if posts_today >= 3:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {posts_today}/3")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                telegram_id = user.telegram_id
                if telegram_id:
                    limit_message = (
                        f"‚ùå <b>–õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                        f"üìä –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {posts_today}/3 –ø–æ—Å—Ç–æ–≤\n"
                        f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}\n"
                        f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n\n"
                        f"üí° –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00"
                    )

                    try:
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=limit_message,
                            parse_mode='HTML'
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    except Exception as notify_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {notify_error}")

                return

            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            await autopost_service.send_single_post(
                db=db,
                user_id=user_id,
                channel_id=channel_id,
                category=category,
                style=style
            )
        logger.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as db:
            from database.models import User
            from sqlalchemy import select

            user_result = await db.execute(
                select(User.telegram_id).where(User.id == user_id)
            )
            telegram_id = user_result.scalar()

            if telegram_id:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                posts_today_result = await db.execute(
                    select(func.count(PostLog.id)).where(
                        and_(
                            PostLog.user_id == user_id,
                            PostLog.channel_id == channel_id,
                            PostLog.created_at >= today
                        )
                    )
                )
                posts_after = posts_today_result.scalar() or 0

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                try:
                    success_message = (
                        f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                        f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(category)}\n"
                        f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(style)}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%H:%M:%S')}\n"
                        f"üìä –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {posts_after}/3"
                    )

                    await bot.send_message(
                        chat_id=telegram_id,
                        text=success_message,
                        parse_mode='HTML'
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

                except Exception as notify_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {notify_error}")
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}", exc_info=True)

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            async with async_session() as db:
                from database.models import User
                from sqlalchemy import select

                user_result = await db.execute(
                    select(User.telegram_id).where(User.id == user_id)
                )
                telegram_id = user_result.scalar()

                if telegram_id:
                    error_message = (
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞</b>\n\n"
                        f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_emoji_name(category)}\n"
                        f"üé® –°—Ç–∏–ª—å: {get_style_emoji_name(style)}\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:200]}..."
                    )

                    await bot.send_message(
                        chat_id=telegram_id,
                        text=error_message,
                        parse_mode='HTML'
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

        except Exception as notify_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {notify_error}")

    finally:
        await bot.session.close()


async def _schedule_post_async(user_id: int, channel_id: str, category: str, style: str, target_time: str):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        now = datetime.now(MOSCOW_TZ)
        target_hour, target_minute = map(int, target_time.split(':'))

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ
        target_datetime = now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if target_datetime <= now:
            target_datetime += timedelta(days=1)

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        countdown_seconds = int((target_datetime - now).total_seconds())

        logging.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ {target_datetime} (–ú–°–ö), —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now} (–ú–°–ö)")
        logging.info(f"–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ {countdown_seconds} —Å–µ–∫—É–Ω–¥")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º countdown –≤–º–µ—Å—Ç–æ eta –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        result = send_manual_post.apply_async(
            args=[user_id, channel_id, category, style],
            countdown=countdown_seconds
        )

        logging.info(f"–ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å ID: {result.id}, countdown: {countdown_seconds} —Å–µ–∫")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        send_manual_post.apply_async(
            args=[user_id, channel_id, category, style],
            countdown=300
        )


@celery_app.task
def send_scheduled_posts():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)"""
    asyncio.run(_send_scheduled_posts_async())


async def _send_scheduled_posts_async():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–æ—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)
        autopost_service = AutopostService(bot)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(MOSCOW_TZ).strftime('%H:%M')

        async with async_session() as db:
            await autopost_service.process_custom_time_posts(db, current_time)

        await bot.session.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")


@celery_app.task
def send_broadcast_message(user_ids: list, message_text: str):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    asyncio.run(_send_broadcast_async(user_ids, message_text))


async def _send_broadcast_async(user_ids: list, message_text: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    bot = Bot(token=settings.BOT_TOKEN)

    successful = 0
    failed = 0

    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML'
            )
            successful += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            failed += 1
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
    await bot.session.close()


@celery_app.task
def generate_analytics_report(period_days: int = 7):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    asyncio.run(_generate_analytics_async(period_days))


async def _generate_analytics_async(period_days: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        async with async_session() as db:
            from datetime import datetime, timedelta
            from sqlalchemy import select, func, and_
            from database.models import User, Subscription, Transaction, AutopostSettings

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            start_date = datetime.now(MOSCOW_TZ) - timedelta(days=period_days)

            new_users_result = await db.execute(
                select(func.count(User.id)).where(User.created_at >= start_date)
            )
            new_users = new_users_result.scalar() or 0

            active_subs_result = await db.execute(
                select(func.count(Subscription.id)).where(
                    and_(
                        Subscription.is_active == True,
                        Subscription.expires_at > datetime.now(MOSCOW_TZ)
                    )
                )
            )
            active_subs = active_subs_result.scalar() or 0

            total_revenue_result = await db.execute(
                select(func.sum(Transaction.amount)).where(
                    and_(
                        Transaction.status == 'completed',
                        Transaction.created_at >= start_date
                    )
                )
            )
            total_revenue = total_revenue_result.scalar() or 0

            active_autoposts_result = await db.execute(
                select(func.count(AutopostSettings.id.distinct())).where(
                    AutopostSettings.is_active == True
                )
            )
            active_autoposts = active_autoposts_result.scalar() or 0

            logging.info(
                f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_days} –¥–Ω–µ–π: "
                f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}, "
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}, "
                f"–î–æ—Ö–æ–¥: {total_revenue} –∑–≤–µ–∑–¥, "
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤: {active_autoposts}"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


@celery_app.task
def check_subscription_expiry():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    asyncio.run(_check_subscription_expiry_async())


async def _check_subscription_expiry_async():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)

        async with async_session() as db:
            from database.models import User, Subscription
            from sqlalchemy import select, and_

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            now = datetime.now(MOSCOW_TZ)
            tomorrow = now + timedelta(days=1)

            expiring_subs_result = await db.execute(
                select(Subscription, User).join(User).where(
                    and_(
                        Subscription.is_active == True,
                        Subscription.expires_at <= tomorrow,
                        Subscription.expires_at > now
                    )
                )
            )
            expiring_subs = expiring_subs_result.all()

            for subscription, user in expiring_subs:
                try:
                    hours_left = int((subscription.expires_at - now).total_seconds() / 3600)

                    if hours_left <= 24:
                        message = (
                            f"‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b>\n\n"
                            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á–∞—Å–æ–≤\n"
                            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É\n\n"
                            f"üíé /buy - –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                        )

                        await bot.send_message(
                            chat_id=user.telegram_id,
                            text=message,
                            parse_mode='HTML'
                        )

                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")

        await bot.session.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


@celery_app.task
def cleanup_expired_subscriptions():
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    asyncio.run(_cleanup_expired_subscriptions_async())


async def _cleanup_expired_subscriptions_async():
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        async with async_session() as db:
            from database.models import Subscription, AutopostSettings
            from sqlalchemy import select, and_, update

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            now = datetime.now(MOSCOW_TZ)

            expired_subs_result = await db.execute(
                select(Subscription).where(
                    and_(
                        Subscription.is_active == True,
                        Subscription.expires_at <= now
                    )
                )
            )
            expired_subs = expired_subs_result.scalars().all()

            deactivated_count = 0

            for subscription in expired_subs:
                subscription.is_active = False

                await db.execute(
                    update(AutopostSettings).where(
                        AutopostSettings.user_id == subscription.user_id
                    ).values(is_active=False)
                )

                deactivated_count += 1

            await db.commit()

            if deactivated_count > 0:
                logging.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {deactivated_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


@celery_app.task
def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    asyncio.run(_backup_database_async())


async def _backup_database_async():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_session() as db:
            from database.models import User, Subscription, Transaction
            from sqlalchemy import select
            import json
            import os

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            now = datetime.now(MOSCOW_TZ)

            backup_data = {
                'timestamp': now.isoformat(),
                'users': [],
                'subscriptions': [],
                'transactions': []
            }

            users_result = await db.execute(select(User))
            users = users_result.scalars().all()

            for user in users:
                backup_data['users'].append({
                    'telegram_id': user.telegram_id,
                    'username': user.username,
                    'language': user.language,
                    'created_at': user.created_at.isoformat() if user.created_at else None
                })

            subs_result = await db.execute(select(Subscription))
            subscriptions = subs_result.scalars().all()

            for sub in subscriptions:
                backup_data['subscriptions'].append({
                    'user_id': sub.user_id,
                    'plan_type': sub.plan_type,
                    'is_active': sub.is_active,
                    'created_at': sub.created_at.isoformat() if sub.created_at else None,
                    'expires_at': sub.expires_at.isoformat() if sub.expires_at else None
                })

            trans_result = await db.execute(select(Transaction))
            transactions = trans_result.scalars().all()

            for trans in transactions:
                backup_data['transactions'].append({
                    'user_id': trans.user_id,
                    'amount': trans.amount,
                    'status': trans.status,
                    'external_id': trans.external_id,
                    'created_at': trans.created_at.isoformat() if trans.created_at else None
                })

            backup_dir = '/app/backups'
            os.makedirs(backup_dir, exist_ok=True)

            backup_filename = f"backup_{now.strftime('%Y%m%d_%H%M%S')}.json"
            backup_path = os.path.join(backup_dir, backup_filename)

            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            cutoff_time = now - timedelta(days=30)
            for filename in os.listdir(backup_dir):
                if filename.startswith('backup_') and filename.endswith('.json'):
                    file_path = os.path.join(backup_dir, filename)
                    file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                    file_time = MOSCOW_TZ.localize(file_time)
                    if file_time < cutoff_time:
                        os.remove(file_path)

            logging.info(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")


@celery_app.task
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    asyncio.run(_health_check_async())


async def _health_check_async():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        bot = Bot(token=settings.BOT_TOKEN)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as db:
            from sqlalchemy import text
            result = await db.execute(text("SELECT 1"))
            db_status = "OK" if result.scalar() == 1 else "ERROR"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
        try:
            me = await bot.get_me()
            bot_status = "OK" if me else "ERROR"
        except Exception:
            bot_status = "ERROR"

        await bot.session.close()

        logging.info(f"Health check: DB={db_status}, Bot={bot_status}")

        return {
            'database': db_status,
            'telegram_bot': bot_status,
            'timestamp': datetime.now(MOSCOW_TZ).isoformat()
        }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ health check: {e}")
        return {
            'status': 'ERROR',
            'error': str(e),
            'timestamp': datetime.now(MOSCOW_TZ).isoformat()
        }